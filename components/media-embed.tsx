"use client";

import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Image as ImageIcon, FileText, Download } from "lucide-react";
import Image from "next/image";

interface MediaEmbedProps {
	type: "image" | "video" | "document" | "chart";
	src: string;
	alt?: string;
	caption?: string;
	metadata?: {
		size?: string;
		duration?: string;
		format?: string;
		generatedBy?: string;
	};
	className?: string;
}

export function MediaEmbed({ type, src, alt, caption, metadata, className = "" }: MediaEmbedProps) {
	const renderMedia = () => {
		switch (type) {
			case "image":
				return (
					<div className="relative group">
						<Image src={src} alt={alt || "Generated content"} width={800} height={400} className="rounded-lg w-full h-auto" />
						{metadata?.generatedBy && (
							<div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
								<Badge variant="secondary" className="text-xs">
									Generated by {metadata.generatedBy}
								</Badge>
							</div>
						)}
					</div>
				);
			case "video":
				return (
					<div className="relative rounded-lg overflow-hidden bg-black">
						<video src={src} poster={alt} controls className="w-full h-auto">
							Your browser does not support the video tag.
						</video>
						{metadata?.duration && (
							<div className="absolute bottom-2 right-2">
								<Badge variant="secondary" className="text-xs">
									{metadata.duration}
								</Badge>
							</div>
						)}
					</div>
				);
			case "document":
				return (
					<div className="border border-border rounded-lg p-4 flex items-center gap-3 hover:bg-muted/50 transition-colors cursor-pointer">
						<FileText className="h-8 w-8 text-muted-foreground" />
						<div className="flex-1">
							<div className="font-medium">{alt || "Document"}</div>
							{metadata?.format && <div className="text-sm text-muted-foreground">{metadata.format}</div>}
						</div>
						<Download className="h-4 w-4 text-muted-foreground" />
					</div>
				);
			case "chart":
				return (
					<div className="border border-border rounded-lg p-4 bg-muted/20">
						<div className="flex items-center gap-2 mb-2">
							<ImageIcon className="h-4 w-4 text-muted-foreground" />
							<span className="text-sm font-medium">Interactive Chart</span>
						</div>
						<div className="text-sm text-muted-foreground">Chart visualization would be embedded here</div>
					</div>
				);
			default:
				return null;
		}
	};

	return (
		<Card className={`my-6 ${className}`}>
			<CardContent className="p-4">
				{renderMedia()}
				{caption && <div className="mt-3 text-sm text-muted-foreground text-center">{caption}</div>}
				{metadata && (
					<div className="mt-2 flex items-center gap-2 text-xs text-muted-foreground">
						{metadata.size && <span>Size: {metadata.size}</span>}
						{metadata.format && <span>Format: {metadata.format}</span>}
						{metadata.generatedBy && <span>Generated by: {metadata.generatedBy}</span>}
					</div>
				)}
			</CardContent>
		</Card>
	);
}
